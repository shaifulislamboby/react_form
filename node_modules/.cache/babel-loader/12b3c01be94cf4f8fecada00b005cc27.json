{"ast":null,"code":"var _jsxFileName = \"/home/islam/Downloads/s9vgx/src/Login.jsx\";\nimport React, { Component } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { withRouter } from \"react-router-dom\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"loginContainer\",\n      className: \"signinup-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, \" Log In \"), /*#__PURE__*/React.createElement(Formik, {\n      initialValues: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n        address: \"\",\n        acceptedTerms: false // added for our checkbox\n\n      },\n      validationSchema: Yup.object({\n        firstName: Yup.string().max(15, \"Must be 15 characters or less\").required(\"Required\"),\n        lastName: Yup.string().max(20, \"Must be 20 characters or less\").required(\"Required\"),\n        email: Yup.string().email(\"Invalid email addresss`\").required(\"Required\"),\n        password: Yup.string().required('No password provided.').min(8, 'Password is too short - should be 8 chars minimum.').matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/, 'Password must contain atleast one capital letter, one lowercase and one digit'),\n        acceptedTerms: Yup.boolean().required(\"Required\").oneOf([true], \"You must accept the terms and conditions.\"),\n        address: Yup.string() // specify the set of valid values for job type\n        // @see http://bit.ly/yup-mixed-oneOf\n        .required(\"Required\")\n      }),\n      onSubmit: (values, {\n        resetForm,\n        setErrors,\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          console.log(\"Logging in\", values);\n          setSubmitting(false);\n          this.props.history.replace(\"/dashboard\");\n        }, 500);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }, props => {\n      const values = props.values,\n            touched = props.touched,\n            errors = props.errors,\n            isSubmitting = props.isSubmitting,\n            handleChange = props.handleChange;\n      return /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MyTextInput, {\n        label: \"First Name\",\n        name: \"firstName\",\n        type: \"text\",\n        placeholder: \"Jane\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(MyTextInput, {\n        label: \"Last Name\",\n        name: \"lastName\",\n        type: \"text\",\n        placeholder: \"Doe\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(MyTextInput, {\n        label: \"Email Address\",\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"jane@formik.com\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(MyTextInput, {\n        label: \"Password\",\n        name: \"password\",\n        type: \"password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(MyTextInput, {\n        label: \" Address\",\n        name: \"address\",\n        type: \"address\",\n        placeholder: \"City\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(MyCheckbox, {\n        name: \"acceptedTerms\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }, \"I accept the terms and conditions\"), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, \"Submit\"));\n    }));\n  }\n\n}\n\nexport default withRouter(Login);","map":{"version":3,"sources":["/home/islam/Downloads/s9vgx/src/Login.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","Yup","withRouter","Login","constructor","props","render","firstName","lastName","email","password","address","acceptedTerms","object","string","max","required","min","matches","boolean","oneOf","values","resetForm","setErrors","setSubmitting","setTimeout","console","log","history","replace","touched","errors","isSubmitting","handleChange"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,KAAN,SAAoBP,SAApB,CAA8B;AAC5BQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,EAAE,EAAC,gBAAR;AAAyB,MAAA,SAAS,EAAC,oBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,oBAAC,MAAD;AACE,MAAA,aAAa,EAAE;AACbC,QAAAA,SAAS,EAAE,EADE;AAEbC,QAAAA,QAAQ,EAAE,EAFG;AAGbC,QAAAA,KAAK,EAAE,EAHM;AAIbC,QAAAA,QAAQ,EAAE,EAJG;AAKbC,QAAAA,OAAO,EAAE,EALI;AAMbC,QAAAA,aAAa,EAAE,KANF,CAMS;;AANT,OADjB;AAUE,MAAA,gBAAgB,EAAEX,GAAG,CAACY,MAAJ,CAAW;AAC3BN,QAAAA,SAAS,EAAEN,GAAG,CAACa,MAAJ,GACRC,GADQ,CACJ,EADI,EACA,+BADA,EAERC,QAFQ,CAEC,UAFD,CADgB;AAI3BR,QAAAA,QAAQ,EAAEP,GAAG,CAACa,MAAJ,GACPC,GADO,CACH,EADG,EACC,+BADD,EAEPC,QAFO,CAEE,UAFF,CAJiB;AAO3BP,QAAAA,KAAK,EAAER,GAAG,CAACa,MAAJ,GACJL,KADI,CACE,yBADF,EAEJO,QAFI,CAEK,UAFL,CAPoB;AAU3BN,QAAAA,QAAQ,EAAET,GAAG,CAACa,MAAJ,GACPE,QADO,CACE,uBADF,EAEPC,GAFO,CAEH,CAFG,EAEA,oDAFA,EAGPC,OAHO,CAIN,oCAJM,EAKN,+EALM,CAViB;AAiB3BN,QAAAA,aAAa,EAAEX,GAAG,CAACkB,OAAJ,GACZH,QADY,CACH,UADG,EAEZI,KAFY,CAEN,CAAC,IAAD,CAFM,EAEE,2CAFF,CAjBY;AAoB3BT,QAAAA,OAAO,EAAEV,GAAG,CAACa,MAAJ,GACP;AACA;AAFO,SAINE,QAJM,CAIG,UAJH;AApBkB,OAAX,CAVpB;AAoCE,MAAA,QAAQ,EAAE,CAACK,MAAD,EAAS;AAAEC,QAAAA,SAAF;AAAaC,QAAAA,SAAb;AAAwBC,QAAAA;AAAxB,OAAT,KAAqD;AAC7DC,QAAAA,UAAU,CAAC,MAAM;AACfC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,MAA1B;AACAG,UAAAA,aAAa,CAAC,KAAD,CAAb;AAEA,eAAKnB,KAAL,CAAWuB,OAAX,CAAmBC,OAAnB,CAA2B,YAA3B;AAED,SANS,EAMP,GANO,CAAV;AAOD,OA5CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA8CGxB,KAAK,IAAI;AAAA,YAENgB,MAFM,GAOJhB,KAPI,CAENgB,MAFM;AAAA,YAGNS,OAHM,GAOJzB,KAPI,CAGNyB,OAHM;AAAA,YAINC,MAJM,GAOJ1B,KAPI,CAIN0B,MAJM;AAAA,YAKNC,YALM,GAOJ3B,KAPI,CAKN2B,YALM;AAAA,YAMNC,YANM,GAOJ5B,KAPI,CAMN4B,YANM;AASR,0BACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AACE,QAAA,KAAK,EAAC,YADR;AAEE,QAAA,IAAI,EAAC,WAFP;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,WAAW,EAAC,MAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAOE,oBAAC,WAAD;AACE,QAAA,KAAK,EAAC,WADR;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,WAAW,EAAC,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,eAaE,oBAAC,WAAD;AACE,QAAA,KAAK,EAAC,eADR;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,WAAW,EAAC,iBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbF,eAmBE,oBAAC,WAAD;AACE,QAAA,KAAK,EAAC,UADR;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,IAAI,EAAC,UAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAnBF,eAyBE,oBAAC,WAAD;AACE,QAAA,KAAK,EAAC,UADR;AAEE,QAAA,IAAI,EAAC,SAFP;AAGE,QAAA,IAAI,EAAC,SAHP;AAIE,QAAA,WAAW,EAAC,MAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAzBF,eAgCE,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAC,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAhCF,eAoCE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBApCF,CADF;AAwCD,KA/FH,CAFF,CADF;AAsGD;;AA5G2B;;AA+G9B,eAAe/B,UAAU,CAACC,KAAD,CAAzB","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"loginContainer\" className=\"signinup-container\">\r\n        <h3 className=\"mb-4\"> Log In </h3>\r\n        <Formik\r\n          initialValues={{\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            address: \"\",\r\n            acceptedTerms: false, // added for our checkbox\r\n\r\n          }}\r\n          validationSchema={Yup.object({\r\n            firstName: Yup.string()\r\n              .max(15, \"Must be 15 characters or less\")\r\n              .required(\"Required\"),\r\n            lastName: Yup.string()\r\n              .max(20, \"Must be 20 characters or less\")\r\n              .required(\"Required\"),\r\n            email: Yup.string()\r\n              .email(\"Invalid email addresss`\")\r\n              .required(\"Required\"),\r\n            password: Yup.string()\r\n              .required('No password provided.')\r\n              .min(8, 'Password is too short - should be 8 chars minimum.')\r\n              .matches(\r\n                /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/,\r\n                'Password must contain atleast one capital letter, one lowercase and one digit'\r\n              ),\r\n            acceptedTerms: Yup.boolean()\r\n              .required(\"Required\")\r\n              .oneOf([true], \"You must accept the terms and conditions.\"),\r\n            address: Yup.string()\r\n              // specify the set of valid values for job type\r\n              // @see http://bit.ly/yup-mixed-oneOf\r\n\r\n              .required(\"Required\")\r\n          })}\r\n          onSubmit={(values, { resetForm, setErrors, setSubmitting }) => {\r\n            setTimeout(() => {\r\n              console.log(\"Logging in\", values);\r\n              setSubmitting(false);\r\n\r\n              this.props.history.replace(\"/dashboard\");\r\n\r\n            }, 500);\r\n          }}\r\n        >\r\n          {props => {\r\n            const {\r\n              values,\r\n              touched,\r\n              errors,\r\n              isSubmitting,\r\n              handleChange\r\n            } = props;\r\n\r\n            return (\r\n              <Form  >\r\n                <MyTextInput\r\n                  label=\"First Name\"\r\n                  name=\"firstName\"\r\n                  type=\"text\"\r\n                  placeholder=\"Jane\"\r\n                />\r\n                <MyTextInput\r\n                  label=\"Last Name\"\r\n                  name=\"lastName\"\r\n                  type=\"text\"\r\n                  placeholder=\"Doe\"\r\n                />\r\n                <MyTextInput\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  placeholder=\"jane@formik.com\"\r\n                />\r\n                <MyTextInput\r\n                  label=\"Password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n\r\n                />\r\n                <MyTextInput\r\n                  label=\" Address\"\r\n                  name=\"address\"\r\n                  type=\"address\"\r\n                  placeholder=\"City\"\r\n                />\r\n\r\n                <MyCheckbox name=\"acceptedTerms\">\r\n                  I accept the terms and conditions\r\n                </MyCheckbox>\r\n\r\n                <button type=\"submit\" >Submit</button>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Login);\r\n"]},"metadata":{},"sourceType":"module"}