{"ast":null,"code":"import _objectSpread from \"/home/islam/Downloads/s9vgx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/islam/Downloads/s9vgx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/islam/Downloads/s9vgx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/islam/Downloads/s9vgx/src/Login.jsx\";\nimport React, { Component } from \"react\";\nimport { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport { withRouter } from \"react-router-dom\";\n\nconst MyTextInput = (_ref) => {\n  let label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const _useField = useField(props),\n        _useField2 = _slicedToArray(_useField, 2),\n        field = _useField2[0],\n        meta = _useField2[1];\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id || props.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    className: \"text-input\"\n  }, field, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  })), meta.touched && meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, meta.error) : null);\n};\n\nconst MyCheckbox = (_ref2) => {\n  let children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, [\"children\"]);\n\n  const _useField3 = useField(_objectSpread(_objectSpread({}, props), {}, {\n    type: \"checkbox\"\n  })),\n        _useField4 = _slicedToArray(_useField3, 2),\n        field = _useField4[0],\n        meta = _useField4[1];\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, field, props, {\n    type: \"checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  })), children), meta.touched && meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, meta.error) : null);\n};\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"loginContainer\",\n      className: \"signinup-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, \" Log In \"), /*#__PURE__*/React.createElement(Formik, {\n      initialValues: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n        address: \"\",\n        acceptedTerms: false // added for our checkbox\n\n      },\n      validationSchema: Yup.object({\n        firstName: Yup.string().max(15, \"Must be 15 characters or less\").required(\"Required\"),\n        lastName: Yup.string().max(20, \"Must be 20 characters or less\").required(\"Required\"),\n        email: Yup.string().email(\"Invalid email addresss`\").required(\"Required\"),\n        password: Yup.string().required('No password provided.').min(8, 'Password is too short - should be 8 chars minimum.').matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/, 'Password must contain atleast one capital letter, one lowercase and one digit'),\n        acceptedTerms: Yup.boolean().required(\"Required\").oneOf([true], \"You must accept the terms and conditions.\"),\n        address: Yup.string() // specify the set of valid values for job type\n        // @see http://bit.ly/yup-mixed-oneOf\n        .required(\"Required\")\n      }),\n      onSubmit: (values, {\n        resetForm,\n        setErrors,\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          console.log(\"Logging in\", values); //form_values= values;\n\n          setSubmitting(false); //this.props.history.replace(\"/thankyou\");\n\n          this.props.history.push({\n            pathname: '/thankyou',\n            state: {\n              detail: values\n            }\n          });\n          this.props.history.push(\"/thankyou\");\n        }, 500);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, props => {\n      const values = props.values,\n            touched = props.touched,\n            errors = props.errors,\n            isSubmitting = props.isSubmitting,\n            handleChange = props.handleChange;\n      return /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MyTextInput, {\n        label: \"First Name\",\n        name: \"firstName\",\n        type: \"text\",\n        placeholder: \"Jane\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(MyTextInput, {\n        label: \"Last Name\",\n        name: \"lastName\",\n        type: \"text\",\n        placeholder: \"Doe\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(MyTextInput, {\n        label: \"Email Address\",\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"jane@formik.com\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(MyTextInput, {\n        label: \"Password\",\n        name: \"password\",\n        type: \"password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(MyTextInput, {\n        label: \" Address\",\n        name: \"address\",\n        type: \"address\",\n        placeholder: \"City\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(MyCheckbox, {\n        name: \"acceptedTerms\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }\n      }, \"I accept the terms and conditions\", props.values.email), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }\n      }, \"Submit\"));\n    }));\n  }\n\n}\n\nexport default withRouter(Login);","map":{"version":3,"sources":["/home/islam/Downloads/s9vgx/src/Login.jsx"],"names":["React","Component","Formik","Form","useField","Yup","withRouter","MyTextInput","label","props","field","meta","id","name","touched","error","MyCheckbox","children","type","Login","constructor","render","firstName","lastName","email","password","address","acceptedTerms","object","string","max","required","min","matches","boolean","oneOf","values","resetForm","setErrors","setSubmitting","setTimeout","console","log","history","push","pathname","state","detail","errors","isSubmitting","handleChange"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Formik, Form, useField } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst MyCheckbox = ({ children, ...props }) => {\r\n  const [field, meta] = useField({ ...props, type: \"checkbox\" });\r\n  return (\r\n    <>\r\n      <label className=\"checkbox\">\r\n        <input {...field} {...props} type=\"checkbox\" />\r\n        {children}\r\n      </label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"loginContainer\" className=\"signinup-container\">\r\n        <h3 className=\"mb-4\"> Log In </h3>\r\n        <Formik\r\n          initialValues={{\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            address: \"\",\r\n            acceptedTerms: false, // added for our checkbox\r\n  \r\n          }}\r\n          validationSchema={Yup.object({\r\n            firstName: Yup.string()\r\n              .max(15, \"Must be 15 characters or less\")\r\n              .required(\"Required\"),\r\n            lastName: Yup.string()\r\n              .max(20, \"Must be 20 characters or less\")\r\n              .required(\"Required\"),\r\n            email: Yup.string()\r\n              .email(\"Invalid email addresss`\")\r\n              .required(\"Required\"),\r\n            password: Yup.string()\r\n              .required('No password provided.')\r\n              .min(8, 'Password is too short - should be 8 chars minimum.')\r\n              .matches(\r\n                /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/,\r\n                'Password must contain atleast one capital letter, one lowercase and one digit'\r\n              ),\r\n            acceptedTerms: Yup.boolean()\r\n              .required(\"Required\")\r\n              .oneOf([true], \"You must accept the terms and conditions.\"),\r\n            address: Yup.string()\r\n              // specify the set of valid values for job type\r\n              // @see http://bit.ly/yup-mixed-oneOf\r\n  \r\n              .required(\"Required\")\r\n          })}\r\n          onSubmit={(values, { resetForm, setErrors, setSubmitting }) => {\r\n            setTimeout(() => {\r\n              console.log(\"Logging in\", values);\r\n              //form_values= values;\r\n              \r\n              \r\n              setSubmitting(false);\r\n              \r\n              //this.props.history.replace(\"/thankyou\");\r\n              this.props.history.push({\r\n                pathname: '/thankyou',\r\n                state: { detail: values }\r\n              })\r\n              this.props.history.push(\"/thankyou\");\r\n              \r\n              \r\n            }, 500);\r\n          }}\r\n        >\r\n          {props => {\r\n            const {\r\n              values,\r\n              touched,\r\n              errors,\r\n              isSubmitting,\r\n              handleChange\r\n            } = props;\r\n\r\n            return (\r\n              <Form  >\r\n          <MyTextInput\r\n            label=\"First Name\"\r\n            name=\"firstName\"\r\n            type=\"text\"\r\n            placeholder=\"Jane\"\r\n          />\r\n          <MyTextInput\r\n            label=\"Last Name\"\r\n            name=\"lastName\"\r\n            type=\"text\"\r\n            placeholder=\"Doe\"\r\n          />\r\n          \r\n          <MyTextInput\r\n            label=\"Email Address\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            placeholder=\"jane@formik.com\"\r\n          />\r\n          <MyTextInput\r\n            label=\"Password\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n\r\n          />\r\n          <MyTextInput\r\n            label=\" Address\"\r\n            name=\"address\"\r\n            type=\"address\"\r\n            placeholder=\"City\"\r\n          />\r\n\r\n          <MyCheckbox name=\"acceptedTerms\">\r\n            I accept the terms and conditions{props.values.email}\r\n          </MyCheckbox>\r\n\r\n          <button type=\"submit\" >Submit</button>\r\n        </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Login);\r\n\r\n"]},"metadata":{},"sourceType":"module"}